# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VSQ-Logger.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QAction, qApp , QDialog
from search import Ui_Dialog # search
import search as sea

import sqlite3
import PyQt5.QtWidgets as qw

conn=sqlite3.connect('VSQ-Logger.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS Logs
       (QSO_NUMBER INTEGER PRIMARY KEY,QSO_DATE TEXT ,
       QSO_DATE_OFF TEXT ,TIME_ON TEXT ,
       TIME_OFF TEXT ,CALL TEXT ,
       station_callsign TEXT ,DISTANCE DOUBLE ,
       GRIDSQUARE TEXT ,QTH TEXT ,
       MODE TEXT ,FREQ DOUBLE ,
       BAND TEXT ,FREQ_RX DOUBLE ,
       BAND_RX TEXT ,RST_RCVD TEXT ,
       RST_SENT TEXT ,RX_PWR DOUBLE ,
       TX_PWR DOUBLE ,QSL_RCVD BOOLEAN  CHECK (QSL_RCVD IN (0,1)),
       QSL_SENT BOOLEAN  CHECK (QSL_SENT IN (0,1)),
       QSLRDATE TEXT ,QSLSDATE TEXT ,
       QSL_VIA TEXT ,eQSL_QSL_SENT BOOLEAN  CHECK (eQSL_QSL_SENT IN (0,1)),
       eQSL_QSL_RCVD BOOLEAN  CHECK (eQSL_QSL_RCVD IN (0,1)),
       LOTW_QSL_SENT BOOLEAN  CHECK (LOTW_QSL_SENT IN (0,1)),
       LOTW_QSL_RCVD BOOLEAN  CHECK (LOTW_QSL_RCVD IN (0,1)),
       eQSLRDATE TEXT ,eQSLSDATE TEXT ,
       LotwRDATE TEXT ,LotwSDATE TEXT ,SAT_MODE TEXT ,
       SAT_NAME TEXT ,DXCC TEXT ,CQZ INT ,
       ITUZ INT ,IOTA TEXT ,SOTA_REF TEXT ,
       POTA TEXT ,CONTEST_ID TEXT ,Age TEXT ,
       Spread_Method TEXT );''')

c.execute("select * from Logs")
results = c.fetchall()
rows = len(results)
conn.close()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1960, 912)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 1961, 861))
        self.tableWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(14)
        self.tableWidget.setRowCount(rows)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(13, item)
        conn = sqlite3.connect('VSQ-Logger.db')
        c = conn.cursor()
        cursor = conn.execute(
            "SELECT QSO_NUMBER,QSO_DATE,TIME_ON,CALL,station_callsign,GRIDSQUARE,MODE,FREQ,RST_RCVD,RST_SENT,QSL_RCVD,QSL_SENT,eQSL_QSL_SENT,eQSL_QSL_RCVD,LOTW_QSL_SENT,LOTW_QSL_RCVD,SAT_NAME from Logs")
        rowline = 0
        for row in cursor:
            if str(row[10]) == "1" and str(row[11]) == "1" :
                QSL_status = "√"
            else:
                QSL_status = "×"
            if str(row[12]) == "1" and str(row[13]) == "1" :
                eQSL_status = "√"
            else:
                eQSL_status = "×"
            if str(row[14]) == "1" and str(row[15]) == "1" :
                Lotw_status = "√"
            else:
                Lotw_status = "×"
            item = QtWidgets.QTableWidgetItem(str(row[0]))
            self.tableWidget.setItem(rowline, 0, item)
            item = QtWidgets.QTableWidgetItem(row[1])
            self.tableWidget.setItem(rowline, 1, item)
            item = QtWidgets.QTableWidgetItem(row[2])
            self.tableWidget.setItem(rowline, 2, item)
            item = QtWidgets.QTableWidgetItem(row[3])
            self.tableWidget.setItem(rowline, 3, item)
            item = QtWidgets.QTableWidgetItem(row[4])
            self.tableWidget.setItem(rowline, 4, item)
            item = QtWidgets.QTableWidgetItem(row[5])
            self.tableWidget.setItem(rowline, 5, item)
            item = QtWidgets.QTableWidgetItem(row[6])
            self.tableWidget.setItem(rowline, 6, item)
            item = QtWidgets.QTableWidgetItem(str(row[7]))
            self.tableWidget.setItem(rowline, 7, item)
            item = QtWidgets.QTableWidgetItem(row[8])
            self.tableWidget.setItem(rowline, 8, item)
            item = QtWidgets.QTableWidgetItem(row[9])
            self.tableWidget.setItem(rowline, 9, item)
            item = QtWidgets.QTableWidgetItem(QSL_status)
            self.tableWidget.setItem(rowline, 10, item)
            item = QtWidgets.QTableWidgetItem(eQSL_status)
            self.tableWidget.setItem(rowline, 11, item)
            item = QtWidgets.QTableWidgetItem(Lotw_status)
            self.tableWidget.setItem(rowline, 12, item)
            item = QtWidgets.QTableWidgetItem(row[16])
            self.tableWidget.setItem(rowline, 13, item)
            rowline+=1
        conn.close()
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(138)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.verticalHeader().setVisible(False)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1960, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.add_QSO = QtWidgets.QAction(MainWindow)
        self.add_QSO.setObjectName("add_QSO")
        self.search_QSO = QtWidgets.QAction(MainWindow)
        self.search_QSO.setObjectName("search_QSO")
        self.export_ADIF = QtWidgets.QAction(MainWindow)
        self.export_ADIF.setObjectName("export_ADIF")
        self.input_ADIF = QtWidgets.QAction(MainWindow)
        self.input_ADIF.setObjectName("input_ADIF")
        self.EXIT = QtWidgets.QAction(MainWindow)
        self.EXIT.setObjectName("EXIT")
        self.refresh = QtWidgets.QAction(MainWindow)
        self.refresh.setObjectName("refresh")
        self.menu.addAction(self.export_ADIF)
        self.menu.addAction(self.input_ADIF)
        self.menu.addAction(self.refresh)
        self.menu.addSeparator()
        self.menu.addAction(self.EXIT)
        self.menu_2.addAction(self.add_QSO)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.search_QSO)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        '''self.EXIT.triggered.connect(self.EXIT)
        self.refresh.triggered.connect(self.refresh)'''
        self.retranslateUi(MainWindow)
        self.EXIT.triggered.connect(self.EXITAct)
        self.EXIT.triggered.connect(self.EXITAct)
        self.refresh.triggered.connect(self.refreshAct)
        self.export_ADIF.triggered.connect(self.exportAct)
        self.input_ADIF.triggered.connect(self.inputAct)
        self.add_QSO.triggered.connect(self.addAct)
        self.search_QSO.triggered.connect(self.searchAct)
        self.tableWidget.doubleClicked.connect(self.table_change)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def table_change(self, index):
        row = index.row()+1
        print(row)
        os.system('python Logm.py %s' % row)
    def exportAct(self):
        print("export")
    def inputAct(self):
        print("input")
    def addAct(self):
        print("add")
        os.system('python Log.py')
    def searchAct(self):
        print("search")
    def EXITAct(self):
        exit()
    def refreshAct(self):
        conn = sqlite3.connect('VSQ-Logger.db')
        c = conn.cursor()
        c.execute("select * from Logs")
        results = c.fetchall()
        rows = len(results)
        self.tableWidget.setRowCount(rows)
        cursor = conn.execute(
            "SELECT QSO_NUMBER,QSO_DATE,TIME_ON,CALL,station_callsign,GRIDSQUARE,MODE,FREQ,RST_RCVD,RST_SENT,QSL_RCVD,QSL_SENT,eQSL_QSL_SENT,eQSL_QSL_RCVD,LOTW_QSL_SENT,LOTW_QSL_RCVD,SAT_NAME from Logs")
        rowline = 0
        for row in cursor:
            if str(row[10]) == "1" and str(row[11]) == "1":
                QSL_status = "√"
            else:
                QSL_status = "×"
            if str(row[12]) == "1" and str(row[13]) == "1":
                eQSL_status = "√"
            else:
                eQSL_status = "×"
            if str(row[14]) == "1" and str(row[15]) == "1":
                Lotw_status = "√"
            else:
                Lotw_status = "×"
            item = QtWidgets.QTableWidgetItem(str(row[0]))
            self.tableWidget.setItem(rowline, 0, item)
            item = QtWidgets.QTableWidgetItem(row[1])
            self.tableWidget.setItem(rowline, 1, item)
            item = QtWidgets.QTableWidgetItem(row[2])
            self.tableWidget.setItem(rowline, 2, item)
            item = QtWidgets.QTableWidgetItem(row[3])
            self.tableWidget.setItem(rowline, 3, item)
            item = QtWidgets.QTableWidgetItem(row[4])
            self.tableWidget.setItem(rowline, 4, item)
            item = QtWidgets.QTableWidgetItem(row[5])
            self.tableWidget.setItem(rowline, 5, item)
            item = QtWidgets.QTableWidgetItem(row[6])
            self.tableWidget.setItem(rowline, 6, item)
            item = QtWidgets.QTableWidgetItem(str(row[7]))
            self.tableWidget.setItem(rowline, 7, item)
            item = QtWidgets.QTableWidgetItem(row[8])
            self.tableWidget.setItem(rowline, 8, item)
            item = QtWidgets.QTableWidgetItem(row[9])
            self.tableWidget.setItem(rowline, 9, item)
            item = QtWidgets.QTableWidgetItem(QSL_status)
            self.tableWidget.setItem(rowline, 10, item)
            item = QtWidgets.QTableWidgetItem(eQSL_status)
            self.tableWidget.setItem(rowline, 11, item)
            item = QtWidgets.QTableWidgetItem(Lotw_status)
            self.tableWidget.setItem(rowline, 12, item)
            item = QtWidgets.QTableWidgetItem(row[16])
            self.tableWidget.setItem(rowline, 13, item)
            rowline += 1
        conn.close()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "VSQ-Logger"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "序号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "QSO日期"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "QSO时间"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "WKD"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Station"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "网格"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "模式"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "频率"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "RST_RCVD"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "RST_SENT"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "QSL"))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "eQSL"))
        item = self.tableWidget.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "Lotw"))
        item = self.tableWidget.horizontalHeaderItem(13)
        item.setText(_translate("MainWindow", "SAT"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)

        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "日志"))
        self.add_QSO.setText(_translate("MainWindow", "添加QSO"))
        self.search_QSO.setText(_translate("MainWindow", "搜索日志"))
        self.export_ADIF.setText(_translate("MainWindow", "导出ADIF日志"))
        self.input_ADIF.setText(_translate("MainWindow", "导入ADIF日志"))
        self.EXIT.setText(_translate("MainWindow", "退出"))
        self.refresh.setText(_translate("MainWindow", "刷新日志"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
